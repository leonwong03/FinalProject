{"ast":null,"code":"export const addToCart = (product, qty) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(item => {\n    if (item.id === product.id) {\n      alreadyExists = true;\n      item.qty += qty;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product,\n      qty\n    });\n  }\n\n  dispatch({\n    type: 'CART_ADD_ITEM',\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};\nexport const removeFromCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter(item => item.id !== product.id);\n  dispatch({\n    type: 'CART_REMOVE_ITEM',\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};\nexport const editCartItem = (product, qty) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  cartItems.forEach(item => {\n    if (item.id === product.id) {\n      item.qty = qty;\n    }\n  });\n  dispatch({\n    type: 'CART_EDIT_ITEM',\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["/Users/leon/Development/Deli-Vape-Project/Client/src/actions/cartActions.js"],"names":["addToCart","product","qty","dispatch","getState","cartItems","cart","slice","alreadyExists","forEach","item","id","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","filter","editCartItem"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,OAAD,EAAUC,GAAV,KAAkB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjE,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;AAEAH,EAAAA,SAAS,CAACI,OAAV,CAAkBC,IAAI,IAAI;AACxB,QAAIA,IAAI,CAACC,EAAL,KAAYV,OAAO,CAACU,EAAxB,EAA4B;AAC1BH,MAAAA,aAAa,GAAG,IAAhB;AACAE,MAAAA,IAAI,CAACR,GAAL,IAAYA,GAAZ;AACD;AACF,GALD;;AAMA,MAAI,CAACM,aAAL,EAAoB;AAClBH,IAAAA,SAAS,CAACO,IAAV,CAAe,EAAE,GAAGX,OAAL;AAAcC,MAAAA;AAAd,KAAf;AACD;;AAEDC,EAAAA,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAE,eADC;AAEPC,IAAAA,OAAO,EAAE;AAAET,MAAAA;AAAF;AAFF,GAAD,CAAR;AAIAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeb,SAAf,CAAlC;AACD,CAnBM;AAqBP,OAAO,MAAMc,cAAc,GAAGlB,OAAO,IAAI,CAACE,QAAD,EAAWC,QAAX,KAAwB;AAC/D,QAAMC,SAAS,GAAGD,QAAQ,GACvBE,IADe,CACVD,SADU,CACAE,KADA,GAEfa,MAFe,CAERV,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYV,OAAO,CAACU,EAFpB,CAAlB;AAIAR,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,OAAO,EAAE;AAAET,MAAAA;AAAF;AAArC,GAAD,CAAR;AACAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeb,SAAf,CAAlC;AACD,CAPM;AASP,OAAO,MAAMgB,YAAY,GAAG,CAACpB,OAAD,EAAUC,GAAV,KAAkB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpE,QAAMC,SAAS,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,SAAhB,CAA0BE,KAA1B,EAAlB;AAEAF,EAAAA,SAAS,CAACI,OAAV,CAAkBC,IAAI,IAAI;AACxB,QAAIA,IAAI,CAACC,EAAL,KAAYV,OAAO,CAACU,EAAxB,EAA4B;AAC1BD,MAAAA,IAAI,CAACR,GAAL,GAAWA,GAAX;AACD;AACF,GAJD;AAMAC,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAE,gBAAR;AAA0BC,IAAAA,OAAO,EAAE;AAAET,MAAAA;AAAF;AAAnC,GAAD,CAAR;AACAU,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeb,SAAf,CAAlC;AACD,CAXM","sourcesContent":["export const addToCart = (product, qty) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n\n  cartItems.forEach(item => {\n    if (item.id === product.id) {\n      alreadyExists = true;\n      item.qty += qty;\n    }\n  });\n  if (!alreadyExists) {\n    cartItems.push({ ...product, qty });\n  }\n\n  dispatch({\n    type: 'CART_ADD_ITEM',\n    payload: { cartItems },\n  });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};\n\nexport const removeFromCart = product => (dispatch, getState) => {\n  const cartItems = getState()\n    .cart.cartItems.slice()\n    .filter(item => item.id !== product.id);\n\n  dispatch({ type: 'CART_REMOVE_ITEM', payload: { cartItems } });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};\n\nexport const editCartItem = (product, qty) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n\n  cartItems.forEach(item => {\n    if (item.id === product.id) {\n      item.qty = qty;\n    }\n  });\n\n  dispatch({ type: 'CART_EDIT_ITEM', payload: { cartItems } });\n  localStorage.setItem('cartItems', JSON.stringify(cartItems));\n};\n"]},"metadata":{},"sourceType":"module"}